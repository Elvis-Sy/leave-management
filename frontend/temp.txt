import React, { useState } from 'react';
import { DateRange } from 'react-date-range';
import 'react-date-range/dist/styles.css'; 
import 'react-date-range/dist/theme/default.css';
import { format } from 'date-fns';


$2b$10$Y/RvTdHDv8vHj7ARW6TXCeQKoX879lI83TzKpaKejoauPs7eXZD3O

  const [state, setState] = useState([
    {
      startDate: new Date(),
      endDate: new Date(),
      key: 'selection'
    }
  ]);

  const formattedStartDate = format(state[0].startDate, 'dd-MM-yyyy');
  const formattedEndDate = format(state[0].endDate, 'dd-MM-yyyy'); 




   
        <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', marginTop: '50px' }}>
            <DateRange
              editableDateInputs={false}
              onChange={item => setState([item.selection])}
              moveRangeOnFirstSelection={false}
              ranges={state}
              months={2}
              direction="horizontal"
              showDateDisplay={false}
              rangeColors={['#64748b']}
            />

            {/* Affichage des dates formatées */}
            <div style={{ marginTop: '20px' }}>
              <div>
                <label>Date de début :</label>
                <input type="text" value={formattedStartDate} readOnly style={{ marginLeft: '10px', padding: '5px' }} />
              </div>
              <div style={{ marginTop: '10px' }}>
                <label>Date de fin :</label>
                <input type="text" value={formattedEndDate} readOnly style={{ marginLeft: '10px', padding: '5px' }} />
              </div>
            </div>
        </div>









"use client"

import React, { useState } from 'react';
import { DateRange } from 'react-date-range';
import { format } from 'date-fns';
import 'react-date-range/dist/styles.css'; 
import 'react-date-range/dist/theme/default.css'; 

const DateRangeSelector = () => {
  const [state, setState] = useState([
    {
      startDate: new Date(),
      endDate: new Date(),
      key: 'selection'
    }
  ]);

  const formattedStartDate = format(state[0].startDate, 'dd-MM-yyyy');
  const formattedEndDate = format(state[0].endDate, 'dd-MM-yyyy');

  return (
    <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', marginTop: '50px' }}>
      <div style={{ width: '400px', height: '300px' }}> {/* Dimensions personnalisées */}
        <DateRange
          editableDateInputs={false}
          onChange={item => setState([item.selection])}
          moveRangeOnFirstSelection={false}
          ranges={state}
          months={1}
          direction="horizontal"
          rangeColors={['#64748b']}
          showDateDisplay={false}
        />
      </div>

      {/* Affichage des dates formatées */}
      <div style={{ marginTop: '20px' }}>
        <div>
          <label>Date de début :</label>
          <input type="text" value={formattedStartDate} readOnly style={{ marginLeft: '10px', padding: '5px' }} />
        </div>
        <div style={{ marginTop: '10px' }}>
          <label>Date de fin :</label>
          <input type="text" value={formattedEndDate} readOnly style={{ marginLeft: '10px', padding: '5px' }} />
        </div>
      </div>
    </div>
  );
};

export default DateRangeSelector;



//Baguette magique
<svg
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M16.6 2.6c.5-.5 1.2-.5 1.7 0l3.1 3.1c.5.5.5 1.2 0 1.7L8.1 20.6c-.5.5-1.2.5-1.7 0l-3.1-3.1c-.5-.5-.5-1.2 0-1.7L16.6 2.6z"
        fill="#969696"
      />
      <path
        d="M5 2H7V5H5V2ZM17 18H19V21H17V18ZM15.4 8.6L17.5 6.5L19.6 8.6L17.5 10.7L15.4 8.6ZM3 9H5V11H3V9ZM19 11H21V13H19V11ZM3 15H5V17H3V15Z"
        fill="#969696"
      />
    </svg>



//Compteur
<svg
width="24"
height="24"
viewBox="0 0 24 24"
fill="none"
xmlns="http://www.w3.org/2000/svg"
>
<rect x="3" y="3" width="18" height="18" rx="2" fill="#969696" />
<path
  d="M6 8H8V10H6V8ZM10 8H12V10H10V8ZM14 8H16V10H14V8ZM6 12H8V14H6V12ZM10 12H12V14H10V12ZM14 12H16V14H14V12Z"
  fill="white"
/>
</svg>



//Solde de conge
<svg
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      {/* Background rectangle */}
      <path
        d="M3 3 H21 V21 H3 V3 Z"
        fill="#969696"
        rx="4"
      />
      
      <text
        x="12"
        y="16"
        textAnchor="middle"
        fontSize="12"
        fontWeight="bold"
        fill="white"
      >
        {11}
      </text>
    </svg>



















"use client"
import { useState } from 'react';
import { Calendar, momentLocalizer } from 'react-big-calendar';
import moment from 'moment';
import 'react-big-calendar/lib/css/react-big-calendar.css';
import 'moment/locale/fr';

moment.locale('fr'); // Changer la langue en français
const localizer = momentLocalizer(moment);

// Exemple d'événements
const events = [
  // {
  //   title: 'Long Event',
  //   start: new Date(2024, 8, 1),
  //   end: new Date(2024, 8, 3),
  //   allDay: true,
  // },
  // {
  //   title: 'Meeting',
  //   start: new Date(2024, 8, 6),
  //   end: new Date(2024, 8, 6),
  //   allDay: false,
  // },
];

const MyBigCalendar = () => {

  const [currentView, setCurrentView] = useState('month'); // Gestion de la vue actuelle
  const [currentDate, setCurrentDate] = useState(new Date()); // Gestion de la date actuelle

  const handleNavigate = (date) => {
    setCurrentDate(date);
  };

  const handleViewChange = (view) => {
    setCurrentView(view);
  };

  const CustomToolbar = (props) => {

    return (
      <div className="rbc-toolbar">
        <span className="rbc-btn-group">
          <button type="button" onClick={goToBack}>Précédent</button>
          <button type="button" onClick={goToCurrent}>Aujourd'hui</button>
          <button type="button" onClick={goToNext}>Suivant</button>
        </span>
        <span className="rbc-toolbar-label">{props.label}</span>
        <span className="rbc-btn-group">
          <button type="button" onClick={() => handleViewChange('month')}>Mois</button>
          <button type="button" onClick={() => handleViewChange('week')}>Semaine</button>
          <button type="button" onClick={() => handleViewChange('day')}>Jour</button>
        </span>
      </div>
    );
  };

  return (
    <div className="bg-white shadow-lg p-4 rounded-md m-4 flex-1">
      <Calendar
        localizer={localizer}
        events={events}
        startAccessor="start"
        endAccessor="end"
        style={{ height: 500 }}
        views={['month', 'week', 'day']}
        view={currentView}
        date={currentDate}
        onNavigate={handleNavigate}
        onView={handleViewChange}
        popup={true}
      />
    </div>
  );
};

export default MyBigCalendar;













const AccepModal = dynamic(() => import('@/components/modals/acceptModal'));
const RefuseModal = dynamic(() => import('@/components/modals/refuseModal'));




"use client";
import { Modal, Popover, PopoverTrigger, PopoverContent, Pagination, Button, Autocomplete, AutocompleteItem } from '@nextui-org/react';
import React, { useEffect, useState } from "react";
import { TableWrapper } from "@/components/table/table";
import { colAttente } from "../table/data";
import { RenderCell } from "../table/render-attente";
import TableSearch from "../table/tableSearch" 
import axios from "axios";
import { ToastContainer } from 'react-toastify';
import AccepModal from '@/components/modals/acceptModal'
import RefuseModal from '@/components/modals/refuseModal'
import { addDays } from 'date-fns';
import Image from 'next/image';

export const DMAttente = () => {

    const [type, setType] = useState([]);
    const [row, setRow] = useState([])
    const [tempRow, setTempRow] = useState([])
    const [currentPage, setCurrentPage] = useState(1)
    const rowsPerPage = 5 // Nombre de lignes par page
    const [dateDebut, setDateDebut] = useState('');
    const [dateFin, setDateFin] = useState('');
    const [typeConge, setTypeConge] = useState()
    const [openModal, setOpenModal] = useState(null);
    const [idSupp, setId] = useState(null);

    // Fonction pour gérer la sélection du type de conge
    const handleTypeSelect = (item) => {
        setTypeConge(item);
      };

  // Fonction qui sera appelée lors du clic sur le bouton "Filtrer"
  const handleFiltrer = () => {
    filtreEmploye(typeConge, dateDebut, dateFin);
  };

  //Ouvertur modal
  const onOpen = (modalId) => {
    setOpenModal(modalId);
  };

  //Fermeture modal
  const onClose = () => {
    setOpenModal(null);
  };

  useEffect(()=>{
    if (typeof window !== "undefined") {
      const id = localStorage.getItem('id');
      if (id) {
          allAttente(id);
      }
      getType();
  }
  }, [])

  //Prendre les donnees
  const allAttente = async (id) => {
    try {
      const response = await axios.get(`http://localhost:5000/api/demandes/attente/${id}`, {
          headers: {
              Authorization: `Bearer ${localStorage.getItem('token')}`
          }
      });

      setRow(response.data.demande)
      setTempRow(response.data.demande)

    } catch (error) {
        console.error('Erreur lors de la requête:', error.response?.data || error.message);
        setRow([])
    }
  };

  //Recherche par nom
  const searchAttente = async (val) => {
    const temp = tempRow.filter((item)=>item.name.toLowerCase().includes(val.toLowerCase()))
    setRow(temp)
  }; 

  //Filtrage des donnees
  const filtreEmploye = async (type = '', dateDebut = '', dateFin = '') => {
    try {
      
      if (!type && !dateDebut && !dateFin) {
        allAttente(localStorage.getItem('id'))
        return;
      }
  
      // Construire la requête en fonction des filtres fournis
      let query = ''
      query = `http://localhost:5000/api/demandes/attenteFiltre/${localStorage.getItem('id')}?`;
      
      
  
      if (type) {
        query += `type=${encodeURIComponent(type)}&`;
      }
  
      if (dateDebut && dateFin) {
        query += `dateDebut=${encodeURIComponent(dateDebut)}&dateFin=${encodeURIComponent(dateFin)}&`;
      } else if (dateDebut) {
        query += `dateDebut=${encodeURIComponent(dateDebut)}&dateFin=${encodeURIComponent(addDays(dateDebut, 1))}&`;
      } else if (dateFin){
        query += `dateDebut=${encodeURIComponent(addDays(dateFin, 1))}&dateFin=${encodeURIComponent(dateFin)}&`;
      }
  
      // Retirer le dernier "&" inutile
      query = query.slice(0, -1);
  
      const response = await axios.get(query, {
        headers: {
          Authorization: `Bearer ${localStorage.getItem('token')}`
        }
      });

      setRow(response.data.demande)
  
      
    } catch (error) {
      console.error('Erreur lors de la requête:', error.response?.data || error.message);
      setRow([]);
    }
  };

  //Gestion de la pagination et des pages
    //Calcul des nombres de pages
    const totalPages = Math.ceil(row.length / rowsPerPage)

    //Diviser les donnes selon le nombre de page
    const paginatedData = row.slice(
      (currentPage - 1) * rowsPerPage, 
      currentPage * rowsPerPage
    ) 

  const handlePageChange = (page) => {
    setCurrentPage(page)
  }


  //Type Conge
  const getType = async ()=> {
    try {

      const response = await axios.get('http://localhost:5000/api/details/types', {
        headers: {
            Authorization: `Bearer ${localStorage.getItem('token')}`
        }
    });

      setType(response.data.type)

    } catch (error) {
      console.error("Error listage departments:", error);
      setType([])
    }
  }

  return (
    <div className="my-8 px-4 lg:px-6 max-w-[95rem] mx-auto w-full flex flex-col gap-4">
      <ToastContainer/>

      <div className="flex justify-between flex-wrap gap-4 items-center">
        <div className="flex items-center gap-3 flex-wrap md:flex-nowrap">
          <TableSearch search={searchAttente} all={()=>allAttente(localStorage.getItem('id'))}/>
        </div>
        <div className="flex flex-row gap-3.5 flex-wrap">
          <div className="flex items-center gap-4 self-end">

            {/* FILTER */}
            <Popover placement="left" showArrow={true} className="filter2">
              <PopoverTrigger>
                <button type="button" className="flex items-center px-4 py-1 bg-[#0070f0] gap-4 rounded-lg">
                    <Image src="/filter.png" alt="filtre" width={20} height={20}/>
                    <span className='text-lg text-white font-semibold'>Filtrer</span>
                </button>
              </PopoverTrigger>
              <PopoverContent className="p-4 flex flex-col gap-3">

                {/* Filtrage par date */}
                <div className="flex flex-col gap-1">
                  <h5 className="text-bleuspat font-medium">Par date</h5>
                  <div className="flex items-center gap-1">
                    <span>Entre</span> 
                    <div className='relative border-2 p-2 rounded-xl focus-within:border-[#bbcafc] focus-within:ring-1 focus-within:ring-[#bbcafc] border-gray-200'>
                      <input 
                        type="date" 
                        className="block dark:text-white w-full text-gray-700 bg-transparent placeholder-gray-400 focus:outline-none" 
                        placeholder="jj-mm-aaaa" 
                        name="dateDebut"
                        value={dateDebut}
                        onChange={(e) => setDateDebut(e.target.value)}
                      />
                    </div>
                    <span>et</span>
                    <div className='relative border-2 p-2 rounded-xl focus-within:border-[#bbcafc] focus-within:ring-1 focus-within:ring-[#bbcafc] border-gray-200'>
                      <input 
                        type="date" 
                        className="block dark:text-white w-full text-gray-700 bg-transparent placeholder-gray-400 focus:outline-none" 
                        placeholder="jj-mm-aaaa" 
                        name="dateFin"
                        value={dateFin}
                        onChange={(e) => setDateFin(e.target.value)}
                      />
                    </div>
                  </div>
                </div>

                {/* Filtrage par type de conge */}
                <div className="flex flex-col gap-1 w-full">
                  <h5 className="text-bleuspat font-medium">Par types de congés</h5>
                  <Autocomplete
                    variant="bordered"
                    label="Type de conges"
                    placeholder="Recherche du type"
                    className="w-full font-semibold auto"
                    defaultItems={type}
                    defaultSelectedKey={typeConge}
                    onSelectionChange={handleTypeSelect}
                  >
                    {(item) => <AutocompleteItem value={item.value} key={item.value}>{item.label}</AutocompleteItem>}
                  </Autocomplete>
                </div>

                <Button variant="flat" className="w-full" color="primary" onPress={handleFiltrer}>Filtrer</Button>

              </PopoverContent>
            </Popover>

          </div>

        </div>
      </div>
      <div className="max-w-[95rem] mx-auto w-full">
      <TableWrapper RenderCell={(props) => <RenderCell {...props} onOpen={onOpen} setId={setId}/>} columns={colAttente} users={paginatedData}/>
      </div>
      {/* PAGINATION */}
      <div className="mt-4 flex justify-center">
        <Pagination 
          loop showControls
          total={totalPages} 
          page={currentPage} 
          onChange={handlePageChange} 
          variant="faded" 
          className="rounded-md"/>
      </div>

      <Modal isOpen={openModal == "AcceptModal"} onClose={onClose} size="sm">
        <AccepModal onClose={onClose} id={idSupp} reload={allAttente}/>
      </Modal>
      
      <Modal isOpen={openModal == "RefuseModal"} onClose={onClose} size="sm">
        <RefuseModal onClose={onClose} id={idSupp} reload={allAttente}/>
      </Modal>

    </div>
  )
}
